	.TITLE A30180
	.NLIST TTM
	.ASECT
	.RADIX 16
	.SBTTL DECLARATIONS
	.SBTTL	MACROS
	.MACRO .TST A
	..1 = 4*..1+<'A'>
	.IF GE,..1-256.
	.BYTE ..1-256.
	..1 = 1
	.ENDC
	.ENDM
	.MACRO .FLSH
	.IF EQ,..1-1
	.MEXIT
	.ENDC
	.TST 0
	.IF EQ,..1-1
	.MEXIT
	.ENDC
	.TST 0
	.IF EQ,..1-1
	.MEXIT
	.ENDC
	.TST 0
	.ENDM
	.MACRO .PFDSC .DSC
	.IRP .DE,<'.DSC'>
	.IF GE,.DE-4
	.TST .DE&^H300/256.
	.TST .DE&^H0C0/64.
	.TST .DE&^H30/16.
	.TST .DE&12./4
	.ENDC
	.TST .DE&3
	.ENDM
	.ENDM
	.SBTTL	EQUATES
NIOA	=0F7C3
IOVA	=0F7C6
PLAY	=800			;PLAYFIELD ALPHA-NUMERICS
SWBASE	=2000			;SWITCHES
START1	=SWBASE
JOY1	=SWBASE+1
FIRE1	=SWBASE+4
JOY2	=SWBASE+5
DTOA	=2040			;D/A CONV.
TESTSW	=1000			;TEST SWITCH (BIT 6)
COLDET	=2041			;COLLISION DETECTOR
COLRES	=2020			;COLDET RESET
SLAM	=2046			;SLAM SWITCH
VTEST	=1000			;VBLANK*
COINS	=2020			;COIN SWITCHES
LNGOPT	=2060			;LANGUAGE OPTION SW.
CONOPT	=2061			;COIN OPTION SWITCHES
TIMOPT	=2062			;GAME TIME SWITCHES
EXTOPT	=2063			;EXTENDED PLAY OPTION SW.
EXPLO	=2042
WTCHDG	=2044			;WATCHDOG TIMER RESET
BARSWT  =1800
INVSWT	=2024
RBDSWT	=2026
BARLMP	=2060			;BARRIER LAMP
LAMPS	=2068			;CREDIT LAMPS
ATRACT  =2000
INVLMP  =2062     		;'INVISIBLE' LAMP
BNCLMP	=2064			;'BOUNCE' LAMP
LCKOUT  =2066			;LOCKOUT COIL
SHTSND  =206C			;"SHOT SHOT"
FLROM	=2800			;FORIEGN LANGUAGE ROM
HHORIZ	=90			;HARDWARE HORIZ. MOTION CNTR.
HMOTOR	=91			;MOTOR RPM AND VISIBLE BIT
HVERT	=98
HROTN	=99
CRDLIM  =4			;LIMIT FOR CREDIT ACCUMULATION
STKLIM	=176.			;MAKES STACK 80. DEEP MAX
PAUSET	=240.			;1/2 # OF FRAMES TO WAIT FOR SECOND PLAYER
RSTEP	=0C0			;ROTATION STEP
M.SO	=0
M.CF1	=4
M.PS	=5
M.GO	=6
M.EP	=7
M.FOR	=8
M.OF	=9.
M.WM	=10.
M.VT	=11.
M.IT	=12.
M.BS	=13.
M.SS	=14.
M.STP	=15.
M.RBT0	=16.
M.RBT2	=17.
	.SBTTL	RAM
ADL:	.BLKB	1		;ADDRESS PTR
ADH:	.BLKB	1
J:	.BLKB	1		;BUCKET
K:	.BLKB	1		;  "
DIR:	.BLKB	1
TADL:	.BLKB	1
TADH:	.BLKB	1
TSTMSK:	.BLKB	1
TIME:	.BLKB	1		;INC'D BY VBLANK, FOR FLASHERS
SYNC:	.BLKB	1		;SET ONE BY V-BLANK
FTIME:  .BLKB	1		;FOREGROUND'S TIME
FRAMES:	.BLKB	1		;FRAME COUNTER USED BY TCHK
CASE:	.BLKB	1		;-=ATTRACT, +=GAME
EPFLAG:	.BLKB	1		;0=NORMAL, 1=EXTENDED PLAY
TTOTCL:	.BLKB	1		;TANK TO TANK COLLISION FLAG
COLOR:	.BLKB	1		;COLOR OF CHAR TO WRITE
QUOT:	.BLKB	1		;QUOTIENT(AND DIVIDEND) IN ADJLIN (DLOP)
DIVSOR:	.BLKB	1		;DIVISOR IN ADJLIN
PFLG:	.BLKB	1		;NON-ZERO IN PUNT
EXTIM:	.BLKB	1		;EXPLO. TIMER
	.BLKB	2
ROTNL:	.BLKB	1		;LSB'S
ROTN:	.BLKB	1		;ROTATION AS 0-255
	.BLKB	2
OROTN:	.BLKB	1		;OLD ROTATION
MCOUNT:	.BLKB	1		;COUNT OF ACTIVE MISSILES
	.BLKB	2
THSTEP:	.BLKB	1		;TANK HORIZ STEP
TVSTEP:	.BLKB	1		;TANK VERT STEP
	.BLKB	2
MHSTEP: .BLKB	1
MVSTEP:	.BLKB	1
	.BLKB	6
HPOSL:	.BLKB	1		;LOW BYTE OF HORIZ POSN
VPOSL:	.BLKB	1		;LOW BYTE OF VERT POSN
	.BLKB	2
MHPOSL: .BLKB	1
MVPOSL:	.BLKB	1
	.BLKB	6
PHPOSL:	.BLKB	1		;PHANTOM HPOSL
PVPOSL:	.BLKB	1		;   "    VPOSL
LVHP:	.BLKB	1		;LAST VISIBLE H
LVVP:	.BLKB	1		;"     "      V
	.BLKB	2
HPOS:	.BLKB	1		;HORIZ POSN (TANK 0)
VPOS:	.BLËB	1		;VERT POSN
	.BLKB	2		;(TANK 2)
MHPOS:  .BLKB	1		;MISSLE 0 ODD
MVPOS:	.BLKB	1
	.BLKB	6		;MISSLE 2 ODD, 0 EVEN,2 EVEN
PHPOS:	.BLKB	1		;PHANTOM
PVPOS:	.BLKB	1
SHOTS:	.BLKB	1		;# OF SHOTS IN AIR AT ONCE
MISSES:	.BLKB	1
	.BLKB	2
SKLVL:	.BLKB	1		;SKILL LEVEL
ACT:	.BLKB	1		;ACTION REQ'D
	.BLOB	2		;PLAYER 2
SCORE:	.BLKB	1		;SCORE
LOST:	.BLKB	1		;IF MINUS-MISLEAD OTHER ROBOT
	.BLKB	2
RWFLAG:	.BLKB	1		;RE-WRITE FLAG FOR SCORE
LZSPF:	.BLKB	1		;LEADING ZERO SUPPRESSION FLAG
NSWT:	.BLKB	1		;NEW SWITCHES
OSWT:	.BLKB	1		;OLD SWITCHES
STOT:	.BLKB	1		;SWITCH TOTAL
RICREQ:	.BLKB	1		;RICOCHET REQUEST (MISSILES 0,4)
SHTMR:	.BLKB	1		;SHOT TIMER(MISSILES 0,4)
	.BLKB	2
BNCS:	.BLKB	1		;#OF BOUNCES LEFT
MEXTIM: .BLKB	1		;MISSILE EXPLO. TIMER
	.BLKB	6		;THE REST
DADL:	.BLKB	1		;DEBUG ADL,ADH
DADH:	.BLKB	1
MSND:	.BLKB	1		;MOTOR SOUND TEMP
GOTIM:	.BLKB	1		;GAME OVER TIMER
BEEPER:	.BLKB	1		;BEEP FOR COIN OR IN TEST
CLRZON	=.
;EVERYTHING ABOVE THIS LINE IS SET TO 0 AT THE START OF A GAME.EVERYTHING
;BELOW THIS LINE IS SET TO 0 ONLY ON RESET (E.G. POWER-ON)
SSTAT:	.BLKB	1		;SWITCH STATUS,PLAYER 0
FBEDGE:	.BLKB	1		;FIRE BUTTON EDGE MEMORY (0)
	.BLKB	3		;SSTAT(2),FBEGE(2),SSTAT(4)(OPTION SWITCHES)
OOPS:	.BLKB	1		;OLD OPTION SWITCHES
ONS:	.BLKB	1		;SWITCHES THAT ARE ON
RSSTAT:	.BLKB	1		;ROMMEL'S SWITCH STATUS
COLFLG:	.BLKB	1		;COLLISION DETECT FLAG
	.BLKB	2
CNSTAT:	.BLKB	1		;COIN STATUS
COINCT:	.BLKB	1		;COIN COUNT
	.BLKB	1		;OTHER COIN STATUS
CPIPE1: .BLKB	1		;COIN PIPE-LINE FOR POST-COIN SLAM
CPIPE2:	.BLKB	1		;SECOND PIECE OF COIN PIPE-LINE
	.BLKB	2		;PIPE-LINE FOR SECOND MECH.
CREDIT:	.BLKB	1		;# OF CREDITS
PRICE:	.BLKB	1		;PRICE OF A GAME
ROBOT:	.BLKB	1		;0 IS ROBOT,FF IS PLAYER CONTROLED
SHTSPC: .BLKB	1		;SPACE BETWEEN ROBOT SHOTS
	.BLKB	2
RLAMP:	.BLKB	1		;RAM COPY OF START LAMPS, 1 IS ON
BVSWT: .BLKB	1		;- BOUNCE,+ STEER. BIT 6-ON VISIBLE,OFF INVIS.
PFSEL	=BVSWT			;0-CLEAR,1-BARRIERS, OTHERS NON-EXISTENT
INTLOK:	.BLKB	1		;SOFTWARE I-FLAG,MINUS=MASKED
SDB1:	.BLKB	1		;SWITCH DEBOUNCE BUFFER ONE
SDB2:	.BLKB	1		;SWITCH DEBOUNCE BUFFER TWO
	.BLKB	4		;2 MORE PAIRS (FOR OTHER PLAYER & BOZO'S)
TIMER:	.BLKB	1		;VISIBLE TIMER USED BY TCHK
ACTZ:	.BLKB	1		;USED IN TACTIC
RANGE:  .BLKB	1		;"DISTANCE" BETWEEN TANKS
	.IF GT,.-90
	.ERROR			;DMA OVERLAY
	.ENDC
	.=90
DMA:	.BLKB	10

;MISC. STUFF AND NONSENSE
STTIME:	.BLKB	1		;TIMER FOR START
CKSFLG:	.BLKB	1		;BIT MAP OF BAD-CHECKSUM ROMS
OCRED:	.BLKB	1		;OLD CREDIT
FOLKS	=CKSFLG			;SHARE A BYTE
RFTIME:	.BLKB	1		;TIMER FOR REFRESH IN ATTRACT
EOZP	=.
;END OF ZERO-PAGE ALLOCATIONS
	.SBTTL MAINLINE
	.= 0B000
PROG	=.
CKS0:	.BYTE	0E3		;CHECKSUM FOR FIRST 2K
	.SBTTL	MAIN LOOP
WAIT:	BIT A,TESTSW		;TEST-BAR IN BIT 6
	BVS 1$			;NOT TEST, PROCEED
	JMP FRESET		;FAKE RESET
1$:	LSR Z,SYNC		;V-BLANK SETS THIS TO 1
	BCC WAIT		;WAIT FOR NEW FRAME
	LDA Z,CASE		;CHECK WHAT WE'RE DOING
	BPL 2$			;PLUS IS GAME
	JSR ATMSG		;ELSE PUT OUT ATTRACT MSG.S
	JSR STARTQ		;CHECK START BUTTONS
2$:	JSR ROMMEL		;RUN ROBOTS
	LDA Z,CREDIT
	ORA Z,FOLKS
	BEQ 3$
	JSR OPTSEL
3$:	LDA Z,RWFLAG		;CHECK POSSIBLE WIPEOUT
	BNE WAIT			;IF NONZERO, SKIP DISPLAY REFRESH
	JSR SCDISP		;DISPLAY SCORES
	LDA I,1			;RESET RW FLAG
	STA Z,RWFLAG
	BNE WAIT		;***ALWAYS

	.SBTTL	ATTRACT
ATMSG:	LDA Z,TIME
	LSR
	BCC 11$
	LDA A,EXTOPT
	AND I,3
	BEQ 11$
	PHA
	LDX I,M.EP
	JSR WRITEM		;WRITE "EXTENDED PLAY"
	LDX I,M.FOR
	JSR WRITEM		;WRITE FOR
	PLA
	TAX
	LDA I,40
	STA Z,COLOR
	ASL
	STA Z,LZSPF
	LDA AX,EPLTBL-1
	LDY I,71
	JMP WRITED
11$:	LDX I,M.GO
	LDY Z,GOTIM
	BEQ 15$
	DEC Z,GOTIM
	BNE 14$			;TIMER NOT UP YET
	LDA Z,CREDIT		;TIMED OUT, CHECK CREDIT
	BNE 16$			;CREDIT, DO RESET TO WAIT FOR START BUTTONS
14$:	JMP WRITEM
15$:	LDX Z,OCRED
	LDA Z,CREDIT		
	STA Z,OCRED
	BEQ 4$			;NOT ENOUGH,PUT PRICE UP
	CPX I,0   		;HAVE CREDIT NOW, DID WE BEFORE?
	BNE 18$			;YES, SKIP IT
16$:	PHA			;SAVE CREDITS
	JSR OPTSEL		;ELSE READ SWITCHES
	JSR WPF			;RE-WRITE PLAYFIELD,
	JSR SETTNK		;RESET TANKS
	JSR OPTMSG		;OUTPUT OPTIONS
	LDA Z,FOLKS		;ANYBODY IN YET?
	BNE 17$			;YES, DON'T MESS WITH IT
	STA Z,ROBOT
	STA Z,ROBOT+2		;ELSE MAKE THEM BOTH ROBOTS
17$:	PLA
18$:	LDX I,M.CF1
	CMP I,1			;HOW MANY CREDITS?
	BEQ 3$			;ONE KEEP 'CREDIT FOR 1'
2$:	LDX I,M.SO		;ELSE SET 'SELECT OPTIONS'
3$:	JSR WRITEM
	LDX I,M.PS		;TELL HIM TO PRESS START
	JSR WRITEM
	JMP OPTSEL		;LET OPTSEL RETURN
4$:	LDA A,CONOPT
	AND I,3
	TAX
	BEQ 3$			;0=M.SO,TELL HIM TO SELECT OPTIONS
	JSR WRITEM		;WRITE MESSAGE AND RETURN
	LDA Z,TIME
	BNE 6$
	LSR Z,RFTIME		;TIME TO REFRESH?
	BNE 6$			;NO
	LDA I,80		;RESET TIMER
	STA Z,RFTIME
	JSR WPF			;REFRESH PLAYFIELD
	JMP SETTNK		;RESET TANKS
6$:	RTS
EPLTBL:	.BYTE 25.,50.,75.

	.SBTTL	OPTION SELECT
OPTSEL:	LDA Z,SSTAT+4		;OPTION SWITCHES(AND MORE)
	TAY
	EOR Z,OOPS		;CHECK VS. OLD ONES
	STY Z,OOPS		;UPDATE "OLD ONES"
	BEQ 2$
	TYA
	LSR
	ROR
	ROR
	AND I,0C0
	ADC I,0
	TAY
	EOR Z,PFSEL
	STY Z,PFSEL
	LSR
	BCC 1$
	JSR WPF
1$:	LDA Z,CASE			;DON'T WRITE OPTIONS
	BPL 2$
	JMP OPTMSG			;WRITE & RETURN
2$:	RTS


	.SBTTL	OUTPUT OPTIONS
OPTMSG:	LDX I,M.SS
	LDA Z,BVSWT
	BPL 1$
	LDX I,M.BS
1$:	JSR WRITEM
	LDX I,M.VT
	BIT Z,BVSWT
	BVS 2$
	LDX I,M.IT
2$:	JSR WRITEM
	LDX I,M.OF
	LDA Z,PFSEL
	LSR
	BCC 3$
	LDX I,M.WM
3$:	JMP WRITEM
	.SBTTL	START BUTTONS
STARTQ:	LDY Z,FOLKS		;ANYBODY IN?
	BEQ 1$			;NO DARKEN LAMPS
	LDA Z,ROBOT		;MINUS IF IN GAME
	ASL			;FLAG INTO CARRY
	LDA Z,ROBOT+2		;OTHER PLAYER
	ROL
	ROL			;GATHER BITS IN ACC
	AND I,3			;CLEAR TRASH
	TAY			;SAVE IN Y
1$:	JSR STRTQ2		;CHECK NEW CLOSURES
	BCC 3$			;SKIP IF NO NEW ONES
	LDA Z,ROBOT		;ELSE RE-COMPUTE
	ASL
	LDA Z,ROBOT+2
	ROL
	ROL
	AND I,3
	CMP I,3			;EQUAL WILL SET CARRY
	TAY
	LDA I,PAUSET		;START-OF-GAME PAUSE TIME
	BCC 2$			;SKIP IF ONLY ONE IN
	LDA I,1			;ELSE PUT TIMER ON EDGE
2$:	STA Z,STTIME
3$:	LDA I,0
	CMP Z,CREDIT		;C=1 IF CREDIT = 0
	LDA A,CONOPT
	AND I,3
	BNE 35$
	CLC
35$:	LDA Z,TIME		;GET FRAME CTR.
	AND I,10		;2 HZ. BIT
	BNE 4$
	SEC			;C=1 IF NO CREDIT OR TIME(D4) =0
4$:	TYA			;GET LIT LAMP BITS
	BCS 5$
	ORA I,3			;FLASH INACTIVE PLAYER IF CREDIT
5$:	STA Z,RLAMP
	LDA Z,STTIME
	BEQ 7$			;TIMER NOT STARTED YET
	LDA Z,TIME
	LSR
	BCS 6$			;SKIP ODD FRAMES
	DEC Z,STTIME		;RUN TIMER
	BNE 6$
	STY Z,RLAMP		;KILL FLASHER
	LDA I,0A0
	STA Z,TIMER		;SET GAME TIMER
	JMP INIT		;START GAME AND RETURN
6$:	LDA Z,STTIME
	ROL			;MSB OF "SECONDS" INTO CARRY
	AND I,0C0		;CLEAR LSB'S
	ROL
	ROL
	ROL			;0-7 IN ACC, CARRY CLEAR
	ADC I,'1		;MAKE ASCII 1-8
	STA A,PLAY+0A7
	LDX I,M.STP		;"SECONDS TO PLAY"
	JMP WRITEM		;WRITE AND RETURN
7$:	RTS

SCDISP:	LDX I,2
1$:	LDA AX,SCPTBL		;COLOR FOR SCORE
	STA Z,COLOR
	LDY AX,SCPTBL+1		;POSN. FOR SCORE
	LDA I,-1
	STA Z,LZSPF		;FLAG MINUS FOR LEADING ZERO SUPRESS
	LDA ZX,SCORE
	JSR WRITED		;WRITE IT
	ORA I,'0		;NO SUPRESS ON LSD
	JSR WRITE
	DEX
	DEX
	BPL 1$
	LDX I,M.RBT0		;"ROBOT" LABEL FOR PLAYER 0
	LDA Z,ROBOT		;SEE IF IT APPLIES
	BMI 3$			;NO, BLANK FOR INSURANCE
	JSR WRITEM		;ELSE SIGNIFY
2$:	LDX I,M.RBT2		;REPEAT FOR PLAYER
	LDA Z,ROBOT+2
	BMI 5$
	JMP WRITEM		;WRITE AND RETURN
3$:	LDX I,5
	LDA I,0
4$:	STA AX,PLAY+41
	DEX
	BPL 4$
	BMI 2$			;****ALWAYS
5$:	LDX I,5
	LDA I,0
6$:	STA AX,PLAY+59
	DEX
	BPL 6$
	RTS
SCPTBL:	.BYTE 80,39,0C0,22	;SCORE COLOR & POSN. TBL.
	.SBTTL	WRITE TEXT
;CONVERT ACC TO DECIMAL AND WRITE IT
WRITED: STA Z,QUOT		;DIVIDEND GETS ACC
	LDA I,80
	STA Z,LZSPF
	STY Z,J			;SAVE TEXT PTR
	JSR DIV10		;DIVIDE BY TEN
	PHA			;STASH REMAINDER (UNITS)
	JSR DIV10		;DIV BY TEN AGAIN
	PHA			;STASH TENS
	LDY Z,J
	LDA Z,QUOT		;GET HUNDREDS
	JSR WRITEN
	PLA
	INY
	JMP WRITDE
;WRITE ACCUMULATOR
WRITEA:	PHA
	LSR
	LSR
	LSR
	LSR			;ISOLATE TOP NYBBLE
WRITDE: JSR WRITEN		;LABELED FOR ENTRY FROM WRITED
	PLA			;GET ORIG. ACCUM.,FALL THROUGH TO OUTPUT IT
SWRITN:	INY			;SPACE AND WRITE NUMERIC

;WRITE NUMERIC (WITH LEADING ZERO SUPPRESION IF LZSPF IS MINUS)
WRITEN:	AND I,0F		;ISOLATE DIGIT
	BNE 1$			;IF NON-ZERO JUST WRITE IT
	BIT Z,LZSPF		;ELSE CHECK FOR ZERO-SUPPRESSION
	BMI WRITE		;MINUS MEANS SUPPRESS ZEROES, IE. SPACE INSTEAD
1$:	CLC
	ADC I,'0		;CONVERT DIGIT TO ASCII
	LSR Z,LZSPF		;KILL SUPPRESSION FLAG

;WRITE AN ASCII CHARACTER IN TOP OF SCREEN
WRITE:	AND I,3F
	ORA Z,COLOR		;SET BLACK OR WHITE
	STA AY,PLAY
	RTS


;WRITE MSG #(X) IN LANGUAGE SPEC'D BY SWITCHES
WRITEM: LDA A,FLROM
	CMP I,'F
	BNE 1$
	LDA A,FLROM+1
	CMP I,'R
	BNE 1$
	JMP FLROM+2
1$:	LDY AX,MSTBL
	LDA AX,MDTBL
	TAX
2$:	LDA AY,MSGTBL
	CMP I,80
	AND I,3F
	STA AX,PLAY+40
	INY
	INX
	BCC 2$
	RTS
MSTBL:	.BYTE E.SO,E.2PPC,E.1CPP,E.2CPP,E.CF1,E.PS
	.BYTE E.GO,E.EP,E.FOR,E.OF,E.WM,E.VT,E.IT,E.BS,E.SS,E.STP,E.RBT,E.RBT
MDTBL:	.BYTE 47,47,47,47,47,6A,47,0A,2D,0A8,0A8,0C8,0C8,0E8,0E8,68,2,19

	.SBTTL	MESSAGES
	.NLIST BEX
MSGTBL:
E.PS	=.-MSGTBL
	.ASCII /PRESS@STAR/
	.BYTE 'T!80
E.2PPC	=.-MSGTBL
	.ASCII /TWO@PLAYS@PER@COI/
	.BYTE 'N!80
E.1CPP	=.-MSGTBL
	.ASCII /1@COIN@PER@PLAYER/
	.BYTE '@!80
E.2CPP	=.-MSGTBL
	.ASCII /2@COINS@PER@PLAYE/
	.BYTE 'R!80
E.CF1	=.-MSGTBL
	.ASCII /@@@CREDIT@FOR@1@@/
	.BYTE '@!80
E.SO	=.-MSGTBL
	.ASCII /@@SELECT@OPTIONS@/
	.BYTE '@!80
E.GO	=.-MSGTBL
	.ASCII /@@@@@GAME@OVER@@@/
	.BYTE '@!80
E.EP	=.-MSGTBL
	.ASCII /EXTENDED@PLA/
	.BYTE 'Y!80
E.FOR	=.-MSGTBL
	.ASCII /FO/
	.BYTE 'R!80
E.OF	=.-MSGTBL
	.ASCII	/OPEN@FIEL/
	.BYTE	'D!80
E.WM	=.-MSGTBL
	.ASCII	/WALLS@AND@MINES/
	.BYTE	'@!80
E.VT	=.-MSGTBL
	.ASCII	/VISIBLE@TANKS@@/
	.BYTE	'@!80
E.IT	=.-MSGTBL
	.ASCII	/INVISIBLE@TANKS/
	.BYTE	'@!80
E.SS	=.-MSGTBL
	.ASCII	/STEERABLE@SHELL/
	.BYTE	'S!80
E.BS	=.-MSGTBL
	.ASCII	/BOUNCING@SHELLS/
	.BYTE	'@!80
E.STP	=.-MSGTBL
	.ASCII	/@SECONDS@TO@PLAY/
	.BYTE	'@!80
E.RBT	=.-MSGTBL
	.ASCII	/ROBO/
	.BYTE	'T!80
	.LIST BEX


	.SBTTL ROBOT CONTROL
	.SBTTL	 ROMMEL
;THE ROBOT TANK COMMANDER- SHOULD BE GOOD, BUT BEATABLE
ROMMEL: JSV TSOP
	LDX0É,2
1$:	JSR SKDE|
	JSZ WTRAT		;FIG]RE StRATEÇy
	JSr TACTIC
	SÔA ZX,RSSTAT
	DEX
	DEX
	BPL 1$
	RTS
	.SBTTL	TANK SEPARATION
TSEP:	LDX I,1
1$:	STA Z,RANGE
	LDA ZX,LVHP
	SEC
	SBC ZX,LVHP+2
	BCS 2$
	EOR I,-1
	ADC I,1
2$:	DEX
	BPL 1$
	CLC
	ADC Z,RANGE
	BCC 3$
	LDA I,255.
3$:	ORA I,1			;TAKE CARE OF VAN ELDEREN
	STA Z,RANGE
	RTS
	.SBTTL	SKILL DETERMINATION
SKDET:	LDY I,2			;SECOND SKILL LEVEL
	LDA Z,CASE		;ARE WE IN ATTRACT
	BMI 3$			;YES, IGNORE SCORES
	TXA
	EOR I,2			;GET OPPONENT'S #
	TAY			;POINT Y AT HIM
	LDA ZX,SCORE		;SCORES CROSSED, THIS IS HIM
	SEC
	SBC AY,SCORE		;"COMPARE" SCORES (HIM-ME)
	BCS 1$			;BRANCH IF I'M LOSING
	LDA I,0			;ELSE SAY HE'S 0 POINTS AHEAD
1$:	LDY I,3
2$:	LSR
	BEQ 3$			;SCORE EQUAL (TO 3-Y BITS OF PREC.)
	DEY
	BNE 2$
3$:	LDA AY,SKTAB
	STA ZX,SKLVL		;STORE SKILL LEVEL
	RTS
SKTAB:	.BYTE 0,1,3,7		;>8,7-9,3-2,1-0,POINTS AHEAD

	.SBTTL	STRATEGY
STRAT:	LDY I,0			;STARTING QUAD
	STY ZX,ACT		;INIT FOR TACTIC
	LDA ZX,LVVP		;STASH MY VPOS
	PHA
	LDA ZX,LVHP		;STASH MY HPOS
	PHA
	TXA			;STASH MY #
	PHA
	EOR I,2			;GET HIS #
	TAX
	LDA ZX,LVVP		;HIS HPOS
	PHA
	LDA ZX,LVHP		;HIS VPOS
	TSX
;
;STACK FRAME AT THIS TIME, AS DISPLACEMENTS FROM X
;
;	1=HIS VPOS
;	2=MY #
;	3=MY HPOS
;	4=MY VPOS
;
	SEC
	SBC ZX,3		;HIS HPOS-MINE
	BCS 1$
	EOR I,-1		;TAKE ABS VALUE
	ADC I,1
	INY			;SET QUAD 2 OR 3
	INY
1$:	STA ZX,3
	PLA			;GET HIS VPOS
	SEC
	SBC ZX,4		;MINUS MINE
	BCS 2$			;TAKE ABS VAL
	EOR I,-1
	ADC I,1
	INY			;BUMP QUAD #
2$:	STY ZX,4
	CMP ZX,3		;CMP HORIZ TO VERT
	BNE 3$
	LDY I,8.		;IF EQUAL, IS 45 DEG.
	BNE 5$
3$:	SEC			;SET TO SHARE INFINITY
	STA Z,QUOT		;STORE !DELTA VPOS!
	LDA ZX,3
	BEQ 30$			;DON'T DIVIDE BY 0
	STA Z,DIVSOR
	JSR DIVIDE		;DO INTEGER DIVIDE
	ROL
	LDY Z,QUOT
	CPY I,16.
30$:	LDY I,254.
	BCS 4$			;MAKE VALUE INFINITY
	LDY I,4
	BNE 34$
31$:	ROL Z,QUOT
	ROL
	BCS 32$
34$:	CMP Z,DIVSOR
	BCC 33$
32$:	SBC Z,DIVSOR
	SEC
33$:	DEY
	BNE 31$
	ROL Z,QUOT
	LDY Z,QUOT
	LSR Z,DIVSOR
	CMP Z,DIVSOR
4$:	TYA
	ADC I,0			;ROUND UP
	BCS 30$			;IF OVERFLOW, SET INFINITE
	LDY I,16.
45$:	CMP AY,TANTBL
	BCS 5$
;WE COULD PUT INTERPOLATION IN HERE IF IT LOOKED WORTH IT
	DEY
	BPL 45$
5$:	STY ZX,3
	TYA
	LDY ZX,4		;GET "QUAD"
	BEQ 53$			;QUAD 0 RUNS FORWARD
	CPY I,3			;QUAD 3 RUNS FORWARD
	BEQ 53$
	LDA I,16.		;ELSE INVERT
	SEC
	SBC ZX,3
53$:	CLC
	ADC AY,QUADS
	ASL
	ASL
	STA ZX,4		;LEAVE AT "BOTTOM" OF FRAME
	PLA			;GET MY #
	TAX
	PLA			;THROW OUT FLACK
	PLA			;GET ANGLE BACK
	SEC
	SBC ZX,ROTN		;"COMPARE" TO PRESENT ANGLE
	BEQ 7$			;DEAD EQUAL, SHOOT
	AND I,0FC
	BEQ 6$			;VERY CLOSE, POS., CHECK FINER
	CMP I,0FC		;CHECK CLOSE NEG.
	BCC 65$			;NOT CLOSE, ROTATE
6$:	LDY Z,TIME		;SHOULD WE NITPIC
	BNE 7$			;NO
65$:	ASL			;ELSE ROTATE
	ROL ZX,ACT		;SIGN OF DIFFERENCE INTO D0
	INC ZX,ACT		;0->1, 1->2
7$:	LDA I,2			;ASSUME DOUBLE SHOT
	CMP ZX,SKLVL
	BCS 8$			;BRANCH IF SKLVL=0 OR 1 (HIGHEST SKILL)
	LSR			;ELSE SET FOR SINGLE SHOT
8$:	STA ZX,SHOTS
	LDA ZX,SKLVL
	SEC
	ROL
	ASL
	ASL
	ASL
	LDY ZX,SHTMR
	BEQ 85$
	STA ZX,SHTSPC
85$:	LDY ZX,SHTSPC
	BEQ 9$
	DEC ZX,SHTSPC
9$:	RTS
; ACT=0-> DON'T ROTATE
; ACT=1-> CLOCK WISE
; ACT=2-> COUNTER CLOCKWISE
TANTBL:	.BYTE 0,2,3,5,7,9.,11.,13.,16.,19.,24.,30.,39.,53.,80.,162.,255.
QUADS:	.BYTE 16.,0,32.,48.
	.SBTTL	TACTICS
TACTIC:	LDA ZX,RSSTAT			;GET PRESENT SWITCH SETTING
	LDY ZX,PFLG
	BEQ 1$
	DEC ZX,PFLG
	BNE 4$				;WE ARE PUNTING, LEAVE SWITCHES ALONE
1$:	LDA ZX,SKLVL			;GET MASK FOR FRAME CTR.
	AND Z,TIME			;ENOUGH TRAILING ZEROES?
	BEQ 2$				;YES, CHANGE SWITCHES
	LSR
	LDA ZX,RSSTAT			;GET OLD SWITCHES
	BCS 4$				;ODD FRAME
	AND I,0F			;SEE WHAT THEY SAY
	TAY
	LDA AY,NRTAB			;DELETE ROTATION
	RTS
2$:	LDA ZX,ACT
	STA Z,ACTZ
	TXA
	PHA			;SAVE TANK #
	LDA ZX,ROTN		;GET ROTATION
	LSR
	LSR
	LSR
	LSR
	LSR			;SCALE TO 0-7
	ADC I,0			;ROUND
	AND I,7			;MOD 8
	PHA			;SAVE DIRECTION
	LDA ZX,LVVP
	STA Z,PVPOS
	LDA ZX,LVHP
	STA Z,PHPOS
	LDX I,8.
	JSR MTORAM
	PLA			;GET GENERAL DIR. BACK
	CLC
	ADC I,1			;GET RIGHT-FORWARD
	AND I,7			;MOD 8
	TAX
	JSR LOOK
	JSR LOOK
	JSR LOOK
	PLA
	TAX			;GET TANK # BACK
	LDY Z,ACTZ		;USE ORDERS AS INDEX
	LDA AY,ACTAB		;GET FAKE JOYSTICK SWITCHES
	BPL 3$			;WE KNOW WHAT TO DO
	JMP PUNT		;ELSE JUST DO SOMETHING
3$:	PHA			;SAVE SWITCHES
	LDA I,8.
	SEC
	SBC ZX,MISSES		;HOW'S OUR AIM?
	BCS 31$
	LDA I,0
31$:	ASL
	ASL
	ASL			;DESIRED RANGE= 80-(MISSES*16.)
	ASL
33$:	CMP Z,RANGE		;ARE WE WITHIN RANGE?
	PLA
	BCC 35$			;NO, KEEP ADVANCING
	LDA I,48		;ELSE STOP FORWARD MOTION
	LDY ZX,ACT		;CHECK ROTATION THOUGH
	BEQ 35$			;IF AIMED, CHECK SHOOTING ORDERS
	TYA			;ELSE ROTATE TO TRACK
	ORA I,41		;1->41,2->43
35$:	LDY ZX,FBEDGE		;BUTTON DOWN?
	BPL 4$			;YES MAKE UP
	LDY ZX,SHTSPC		;SHOT FIRED RECENTLY?
	BNE 4$			;YES, SKIP IT
	PHA
	LDA ZX,MCOUNT		;HOW MANY SHOTS OUT?
	CMP ZX,SHOTS		;HOW MANY DOES STRAT WANT
	PLA
	BCS 4$			;LEAVE BUTTON UP
	AND I,0F		;FIRE!
4$:	RTS
LOOK:	LDY AX,NTAB
	DEX
	BPL 1$
	LDX I,7
1$:	LDA NY,ADL
	ASL			;D7 INTO CARRY
	ASL			;D6 INTO CARRY
	ASL			;D5 INTO CARRY
	ROL Z,ACTZ
	RTS
ACTAB:	.BYTE 40,41,0C0,41,43,0C0,43,0C0
	.BYTE 42,41,41,41,46,41,43,41
	.BYTE 46,41,43,41,43,43,43,43
NRTAB:	.BYTE 40,48,40,48,44,44,40,44,48	;NO-ROTATION TABLE
PUNT:	LDA I,48.		;FORGET OPPONENT FOR 48 FRAMES
	STA ZX,PFLG
	LDA Z,TIME		;"RANDOM"#
	ASL
	ROL
	ROL			;INTO D1
	AND I,2			;ROTATES ARE 1 & 3
	ORA I,41		;1=CLOCKWISE, 3=CCW (40 TO NOT FIRE)
	RTS

	.SBTTL FOREGROUND
;THIS SET OF ROUTINES IS INVOKED (VIA BRK) ONCE PER FRAME BY THE INTERRUPT
;ROUTINE. THEY UPDATE POSITIONS, HANDLE COLLISIONS, AND GENERALLY HANDLE ALL
;THE TIME-DEPENDANT (BUT NON-CRITICAL) FUNCTIONS OF THE GAME.THIS SECTION
;WILL NOT BE INVOKED IF THE I-MASK IS SET, E.G. IF ITS LAST INVOCATION IS
;STILL RUNNING.
	.SBTTL	EXEC
FGND:	LDA Z,ADH
	PHA
	LDA Z,ADL
	PHA
	LDA Z,J
	PHA
	LDA Z,K
	PHA
	INC Z,FTIME
	JSR TCHK		;TIME GAME
	JSR TTCLCK		;CHECK TANK-TO-TANK COL.
	LDX I,2
3$:	JSR VISQ		;HANDLE VISIBILITY FLAG
	JSR CNTINT		;MOVE TANKS IN RESPONSE TO CONTROLS
	DEX
	DEX
	BPL 3$
	LDX I,6
35$:	JSR MISMOV
	DEX
	DEX
	BPL 35$
	PLA
	STA Z,K
	PLA
	STA Z,J
	PLA
	STA Z,ADL
	PLA
	STA Z,ADH
	RTI

	.SBTTL	GAME-TIMER
TCHK:	DEC Z,FRAMES		;FRAME COUNT
	BPL 6$
	LDA A,TIMOPT
	AND I,3
	TAX
	LDA AX,TIMTBL
	STA Z,FRAMES
	LDA Z,CASE
	BMI 4$
	LDA Z,TIMER		;COUNT THE SECONDS
	BEQ 1$			;TIME'S UP
	SED
	SEC
	SBC I,1
	CLD
	STA Z,TIMER
	CMP I,80		;TIMER BELOW 80?
	BCC 4$			;YES, SKIP
	JSR STRTQ2		;SEE IF SOME TURKEY WANTS IN LATE
	BCC 4$			;NO, SKIÐ
	LDA I,3
	STA Z,RLAMP		;LIGHT HIS LAMP TOO
	BNE 4$			;***ALWAYS
1$:	LDA Z,EPFLAG		;ALREADY IN EXTENDED PLAY?
	BNE 3$			;YES, END GAME
	LDA A,EXTOPT		;ELSE CHECK OPTION SW.
	AND I,3
	BEQ 3$
	TAX
	LDY AX,EPLTBL-1		;GET EXTENDED PLAY LEVEL
	DEY			;MINUS ONE SO COMPARE WILL WORK
	TYA
	LDX I,2
15$:	LDY ZX,ROBOT		;REAL PLAYER?
	BPL 2$			;NO IGNORE SCORE
	PHA
	TXA
	EOR I,2
	TAY			;POINT Y AT SCORE (CROSSED)
	PLA
	CMP AY,SCORE		;DID PLAYER MAKE IT?
	BCS 2$			;NO, KEEP CHECKING
	LDA I,33
	STA Z,TIMER
	STA Z,EPFLAG
	LDX I,M.EP
	JSR WRITEM		;TELL THE PLAYERS
	JMP 4$
2$:	DEX
	DEX
	BPL 15$			;CHECK PLAYER 0
3$:	LDX I,255.		;BACK TO ATTRACT
	STX Z,CASE
	LDA I,120.
	STA Z,GOTIM
	INX			;MAKE A 0 IN X
	STX Z,FOLKS
4$:	LDA Z,TIMER
	LDY I,40
	STY Z,COLOR
	LDY I,80
	STY Z,LZSPF
	LDY I,0F
	JSR WRITEA
	ORA I,30
	STA AY,PLAY
6$:	RTS
TIMTBL:	.BYTE 35.,53.,71.,89.	;60.,90.,120.,150. SECONDS

	.SBTTL	MOTION ROUTINES
CNTINT: LDA Z,CASE
	BEQ 1$
	LDA Z,CREDIT
1$:	ORA Z,GOTIM
	ORA Z,STTIME
	BNE STOP		;DON'T MOVE
	LDA ZX,SSTAT		;GET CONTROL SWITCHES
	LDY Z,CASE		;ATTRACT?
	BMI 15$			;YES, EVERYBODY IS A ROBOT
	LDY ZX,ROBOT		;ELSE GET SELECTIVE
	BMI 2$
15$:	LDA ZX,RSSTAT
2$:	ASL			;FIRE INTO SIGN
	PHA			;SAVE SWITCHES
	EOR ZX,FBEDGE		;CHECK FOR CHANGE
	BPL 3$
	PLA
	PHA
	STA ZX,FBEDGE
	BMI 3$
	JSR FIRE
3$:	PLA			;RETRIEVE SWITCHES
	AND I,1F		;ISOLATE JOYSTICKS
	CMP I,17.		;NO VALUE OVER 16. IS VALID
	BCS STOP		;JUST STOP IF INVALID
	TAY
	LDA AY,MRTBL
	STA Z,ADL
	LDA AY,MRTBL+1
	STA Z,ADH
	LDA I,1
	STA Z,MSND
	LSR			;SO MOTOR WILL IDLE AT 1
	JSR 4$
	JMP RCHK
4$:	JMP N,ADL
MRTBL:  .WORD STEPTF,R2CW,PCWF,R2CCW,STEPTB
	.WORD PCCWB,PCCWF,PCWB,STOP
R2CCW:	JSR RCCW		;ROTATE THEN FALL THRU TO ROTATE AGAIN
RCCW:	LDA ZX,ROTNL		;ROTATE COUNTER-CLOCKWISE
	SEC
	SBC I,RSTEP		;CCW IS DECREASE IN SPRINT
	STA ZX,ROTNL
	BCS 1$
	DEC ZX,ROTN
1$:	LDA I,7			;MOTOR SOUND INCREMENT
STOP:	RTS			;STOP JUST RETURNS
RCHK:	CLC
	ADC Z,MSND
	AND I,7F		;INSURANCE
	STA Z,MSND
	LDA ZX,HMOTOR
	AND I,80
	ORA Z,MSND
	STA ZX,HMOTOR
	LDA ZX,ROTN
	CMP ZX,OROTN		;COMPARE TO OLD ROTATION
	BEQ 2$			;IF EQUAL LEAVE ALONE
	STA ZX,OROTN		;ELSE RESET OROTN
	BIT Z,BVSWT
	BPL 1$			;STEERING? USE 64 ROTATIONS
	AND I,0F8		;ELSE CUT TO 32
1$:	PHA			;SAVE POSSIBLY TRIMMED ROTATION
	JSR SIN			;RE-COMPUTE SIN
	STA ZX,TVSTEP		;TANK VERTICAL STEP
	PLA			;GET BACK ROTATION
	JSR COS			;RE-COMPUTE COS
	STA ZX,THSTEP		;TANK HORIZ. STEP
2$:	RTS
PCCWF:	JSR RCCW		;PIVOT CCW FORWARD
	JMP STEPTF
PCCWB:	JSR RCCW
	JMP STEPTB
PCWB:	JSR RCW
STEPTB:	LDA I,0
	SEC
	SBC ZX,THSTEP
	TAY
	LDA I,0
	SEC
	SBC ZX,TVSTEP
	JMP STEPT
R2CW:	JSR RCW			;ROTATE THEN FALL THRU TO ROTATE AGAIN
RCW:	LDA ZX,ROTNL		;ROTATE CLOCKWISE
	CLC
	ADC I,RSTEP		;CLOCKWISE IS INCREASE IN SPRINT
	STA ZX,ROTNL
	BCC 1$
	INC ZX,ROTN
1$:	LDA I,7			;MOTOR SOUND INCREMENT
	RTS
PCWF:	JSR RCW			;PIVOT IS ROTATE THEN STEP
STEPTF:	LDA ZX,THSTEP
	TAY
	LDA ZX,TVSTEP
STEPT:  PHA
	LDA ZX,EXTIM		;EXPLODING?
	CMP I,40.
	BCC STEPTU		;NO, STEP
	PLA			;ELSE ADJUST STACK
	LDA I,0
	RTS			;SET MOTOR IDLE
STEPTU:	TYA
	PHA
	LDY I,0
	PLA
	PHA
	BPL 1$
	DEY			;SIGN EXTEND
1$:	CLC
	ADC ZX,HPOSL		;D.P. ADD STEP+POSN
	STA ZX,HPOSL
	TYA
	ADC ZX,HPOS
	STA ZX,HPOS
	PLA
	CMP I,80
	ROR
	CLC
	ADC ZX,HPOSL
	STA ZX,HPOSL
	TYA
	ADC ZX,HPOS
	STA ZX,HPOS
	LDY I,0			;REPEAT PROCESS FOR VERT.
	PLA
	PHA
	BPL 2$
	DEY
2$:	CLC
	ADC ZX,VPOSL
	STA ZX,VPOSL
	TYA
	ADC ZX,VPOS
	STA ZX,VPOS
	PLA
	CMP I,80
	ROR
	CLC
	ADC ZX,VPOSL
	STA ZX,VPOSL
	TYA
	ADC ZX,VPOS
	STA ZX,VPOS
	LDA I,4			;MOTOR SOUND INCREMENT
	RTS			;CHECK ROTATION AND SET MOTOR

	.SBTTL	VISIBILITY
VISQ:	LDY I,0
	LDA ZX,COLFLG		;COL. WITH PLAYFIELD
	BPL 1$			;NO, SKIP
	JSR TANKB		;ELSE BACK UP TANK
	LDY I,1			;FLAG FOR DISPLAY
1$:	LDA Z,TTOTCL		;COLLISION WITH OTHER TANK
	BPL 2$			;NO
	INY			;YES, DISPLAY
2$:	LDA ZX,EXTIM		;EXPLODING?
	BEQ 3$			;NO, DISPLAY ONLY IF BVSWT=VISIBLE
	INY			;FLAG DISPLAY
	DEC ZX,EXTIM		;ELSE COUNT DOWN EXPLOSION TIMER
	AND I,3C		;CLEAR BOTTOM 2 BITS
	CMP ZX,EXTIM		;.25 DUTY CYCLE SHOW TANK
	BNE 4$			;75% OF TIME, SHOW EXPLOSION
3$:	LDA ZX,ROTN		;GET ROTATION
	AND I,0F8		;TRIM TO NORMAL PICTURES ONLY
	JMP 5$			;DECIDE AND DISPLAY
4$:	ASL
	AND I,38		;MAKE HIGH BIT DON'T-CARE
	EOR I,3C		;COMP. PICT. SET SPECIALS
5$:	STA ZX,HROTN		;STORE THE PICTURE
	TYA
	BNE 6$			;FORCED DISPLAY?
	BIT Z,BVSWT		;NO, VISIBLE SELECTED?
	BVS 6$			;YES, DISPLAY
	LDA ZX,MCOUNT		;MISSILES OUTSTANDING?
	BEQ 7$			;NO, BLANK TANK
6$:	LDA I,80
7$:	ASL			;SET CARRY IF TANK VISIBLE
8$:	LDA ZX,HMOTOR
	AND I,7F
	BCS 9$
	ORA I,80		;MAKE TANK INVISIBLE
9$:	STA ZX,HMOTOR
	BMI 10$
	LDA ZX,LOST		;LOST'S CROSSED
	BMI 10$			;IF MINUS, KEEP HIDDEN
	LDA ZX,HPOS
	STA ZX,LVHP
	LDA ZX,VPOS
	STA ZX,LVVP
10$:	RTS

	.SBTTL	TANK-WALL COLLISIONS
TANKB:	TXA
	PHA			;PUSH TANK #
	SEC
	SBC I,4			;OFFSET FOR MTORAM
	TAX
	JSR MTORAM		;CONVERT TO RAM ADDR.
	LDX I,8			;9 NEIGHBORS (YAOOITB)
	LDA I,0FF
	PHA
1$:	LDY AX,NTAB
	LDA NY,ADL		;CHECK A CELL
	AND I,20		;D5 ON IS WALL OR MINE
	BEQ 3$			;ELSE SKIP
	PLA			;ACC <- OLD NEIGHBOR
	BMI 2$			;NO OLD, JUST STORE
	JSR NEARST		;CLEAR CARRY IF NEW <=OLD
	BCC 25$			;IF SO, SAVE NEW
2$:	TXA			;ELSE SAVE OLD
25$:	PHA
3$:	DEX
	BPL 1$			;KEEP CHECKING NEIGHBORS
	PLA			;GET NEAREST NEIGHBOR #
	BMI 5$			;GOT SENTINAL, FALSE ALARM
	TAX
	LDY AX,NTAB
	LDA NY,ADL
	CMP I,7A		;MINE?
	BNE 55$			;NO, WALL
	PLA
	PHA
	TAX
	BIT Z,CASE		;IN GAME?
	BMI 35$			;NO, SKIP SCORING
	INC ZX,SCORE
	LSR Z,RWFLAG
35$:	LDA I,3F
	STA ZX,EXTIM
4$:	LDA I,0
	STA NY,ADL		;REMOVE MINE
5$:	PLA
	TAX			;RESTORE TANK#
	RTS
55$:	LDY I,-1
	LDA Z,J			;MINOR OFFSET
	CLC
	ADC AX,VOTAB		;PLUS STAMP OFFSET
60$:	BNE 61$
	TAY			;0 STAYS 0
61$:	BPL 62$			;+ -> -1
	LDY I,1			;- -> +1
62$:	TYA
	PHA
	LDY I,-1
	LDA Z,K
	CLC
	ADC AX,HOTAB
	BNE 65$
	TAY
65$:	BPL 66$
	LDY I,1
66$:	TSX
	LDA ZX,2		;GET BACK TANK PTR.
	TAX
	TYA
	CLC
	ADC ZX,HPOS
	STA ZX,HPOS
	PLA			;GET VERT NUDGE
	CLC
	ADC ZX,VPOS
	STA ZX,VPOS
	PLA			;THROW AWAY OLD TANK #
	RTS
M20:	.BYTE 20			;FOR FAKE BIT I,20
NTAB:	.BYTE 1,2,22,42,41,40,20,0,21	;NEIGHBOR TABLE
HOTAB:  .BYTE 0,8,8,8,0,-8,-8,-8,0	;HORIZ. OFFSET TABLE
VOTAB:  .BYTE	-8,-8,0,8,8,8,0,-8,0	;VERT. OFFSET TABLE
NEARST: PHA			;SAVE OLD NEIGHBOR# (NEAREST)
	TXA
	PHA			;SAVE PRESENT NEIGHBOR#
	LDA AX,VOTAB		;THIS CELL'S VERT. OFFSET FROM CENT.
	CLC
	ADC Z,J			;COMPUTE OFFSET, CELL TO TANK
	CLC
	ADC I,20
	PHA			;ONTO STACK
	LDA AX,HOTAB
	CLC
	ADC Z,K
	CLC
	ADC I,20
	PHA
	LDA I,20
	TAY
;STACK FRAME
;	1 = NEWH
;	2 = NEWV
;	3 = NEW #
;	4 = OLD #
;	5 = PCL OF CALLER
;	6 = PCH OF CALLER
	JSR DISTSQ
	TSX
	STA ZX,2		;SAVE NEW DIST**2 IN STACK (OVER NEWV)
	PLA			;EVEN UP STACK (DELETE NEWH)
	LDA ZX,4		;GET OLD NEIGHBOR #
	TAX
	LDA AX,VOTAB		;REPEAT FOR OLD NEIGHBOR
	CLC
	ADC Z,J
	CLC
	ADC I,20
	PHA
	LDA AX,HOTAB
	CLC
	ADC Z,K
	CLC
	ADC I,20
	PHA
;	1 = OLD H
;	2 = OLD V
;	3 = NEW DIST**2
;	4 = NEW #
;	5 = OLD #
;	6 = PCL OF CALLER
;	7 = PCH OF CALLER
	LDA I,20
	TAY
	JSR DISTSQ
	TSX
	CMP ZX,3			;OLD-NEW
20$:	PLA				;UNSTACK OLD H
	PLA				;UNSTACK OLD V
	PLA				;UNSTACK NEW DIST**2
	PLA				;PRESENT NEIGHBOR
	TAX				;RESTORE X
	PLA				;GET OLDX 
	RTS
DISTSQ:	PHA
	TXA
	PHA
	TYA
	PHA
	TSX
;
;STACK FRAME AT THIS TIME, AS DISPLACEMENTS FROM X
;
;	1=VPOS 2 (Y)
;	2=OLD X
;	3=HPOS 2 (ACC)
;	4=PCL OF CALLER
;	5=PCH OF CALLER
;	6=VPOS 1
;	7=HPOS 1
;
	LDA ZX,1
	SEC
	SBC ZX,6
	BCS 1$
	EOR I,0FF
	ADC I,1
1$:	CMP I,16.
	BCS 3$
	TAY
	LDA AY,SQTAB
	STA ZX,1
	LDA ZX,3
	SEC
	SBC ZX,7
	BCS 2$
	EOR I,0FF
	ADC I,1
2$:	CMP I,16.
	BCS 3$
	TAY
	LDA AY,SQTAB
	ADC ZX,1
	BCC 4$
3$:	LDA I,0FF
4$:	STA ZX,3
	PLA
	TAY
	PLA
	TAX
	PLA
	RTS
SQTAB:	.BYTE	0,1,4,9,16.,25.,36.,49.,64.,81.,100.,121.,144.,169.,196.,225.

	.SBTTL	TANK-TANK COLLISIONS
TTCLCK:	LDA Z,HPOS		;GET TANK 0 CO-ORDS
	PHA			;ONTO STACK
	LDA Z,VPOS
	PHA
	LDA Z,HPOS+2		;ALSO TANK 2 CO-ORDS
	LDY Z,VPOS+2
	JSR DISTSQ		;FIN DISTANCE, SQUARED
	CMP I,196.		;"TANK" IS CIRCLE, DIAM. 14
	PLA			;THROW AWAY PARAMS
	PLA
	LDA I,0			;DEFAULT "NO HIT"
	BCS 3$			;NOW CHECK THAT COMPARE
	LDX I,0
1$:	LDA ZX,HPOS
	CMP ZX,HPOS+2
	TXA
	BCC 2$
	EOR I,2
	TAX
2$:	DEC ZX,HPOS
	EOR I,2
	TAX
	INC ZX,HPOS
	LDX I,1
	LSR 
	BCC 1$
	LDA I,80		;FLAG FOR YES
3$:	STA Z,TTOTCL		;TANK-TANK COLLISION
	RTS
	.SBTTL	FIRE-CONTROL
FIRE:	TXA
	PHA			;SAVE TANK #
	EOR I,2
	TAY
	LDA AY,EXTIM		;OTHER TANK EXPLODING
	BNE 4$			;YES, SKIP IT
	LDA ZX,THSTEP
	PHA			;SAVE H-VEL
	ORA ZX,TVSTEP
	BEQ 35$
	LDA ZX,TVSTEP
	PHA			;AND V
	JSR TTOM		;CONVERT TANK TO MISSILE CO-ORD
	PHA			;SAVE H
	TXA
	EOR I,2			;CHANGE COLOR
	TAX
	LDA ZX,MVPOS		;CHECK FIRST MISSILE
	BEQ 1$			;IDLE, USE IT
	LDA ZX,MVPOS+4		;ELSE CHECK #2
	BNE 3$			;ALSO BUSY, HANG IT UP
	INX			;ELSE POINT TO IT
	INX
	INX
	INX
1$:	STY ZX,MVPOS		;STASH PARAMS
	PLA
	STA ZX,MHPOS
	PLA
	STA ZX,MVSTEP
	PLA
	STA ZX,MHSTEP
	BIT Z,BVSWT
	BPL 2$
	LDA I,10		;4 BOUNCES ALLOWED (KILL ON 5TH)
	STA ZX,BNCS
2$:	PLA
	TAX
	LDY I,0F		;SHOT LASTS JUST UNDER 4 FRAMES
	STY ZX,SHTMR
	INC ZX,MCOUNT
	RTS
3$:	PLA			;UN-STACK PARAM.S
	PLA
35$:	PLA			;ADJUST STACK AND EXIT
4$:	PLA
	TAX			;AND TANK#
	RTS
	.SBTTL	MISSILE MOVEMENT
;ENTERED WITH X=MISSILE # (0,2,4,6) UPDATES MHPOS,MVPOS
;BLITZ J,K,Y,A
MISMOV:	LDA ZX,MVPOS		;CHECK STATUS
	BNE 1$			;PROCESS IF ACTIVE
	RTS			;ELSE GO HOME
1$:	LDA ZX,MEXTIM		;MISSILE EXPLODING?
	BEQ 2$			;NO, PROCESS
	JMP MISEXP		;ELSE DO EXPLOSION
2$:	STA Z,J  		;CLR J
	BIT Z,BVSWT		;-MEANS BOUNCE,+MEANS CURVE
	BMI 3$			;IF BOUNCE USE INDEPENDENT VEL.
	TXA			;GET MISSILE #
	AND I,2			;ISOLATE PLAYER #
	EOR I,2			;***FLIP COLOR
	TAY
	LDA AY,TVSTEP
	PHA
	LDA AY,THSTEP
	JMP STEPM
3$:	LDA ZX,MVSTEP
	PHA
	LDA ZX,MHSTEP
STEPM:	STA Z,K
	ASL			;VEL*2
	BCC 1$
	DEC Z,J			;SIGN EXTEND
1$:	ASL			;VEL*4
	ROL Z,J
2$:	BIT Z,BVSWT		;BOUNCE?
	BMI 4$  		;YES, LEAVE*4
	SEC
	SBC Z,K			;ELSE SUB. TO MAKE *3
	PHA
	LDA I,0
	BIT Z,K
	BMI 3$
	LDA I,0FF
3$:	ADC Z,J
	STA Z,J
	PLA
4$:	CLC
	ADC ZX,MHPOSL		;D.P. ADD
	STA ZX,MHPOSL
	LDA Z,J
	ADC ZX,MHPOS
	STA ZX,MHPOS
	TXA
	LSR
	BCS 5$
	LDA I,0
	STA Z,J
	PLA
	INX
	BNE STEPM
5$:	DEX
MWCHK:	JSR MTORAM
	LDA NY,ADL
	CMP I,7A		;MINE?
	BEQ HITCHK		;YES, IGNORE IT
	BIT A,M20		;WALL PIECE?
	BEQ HITCHK		;NO, CHECK FOR TANK HIT
	LSR ZX,BNCS		;STILL ALLOWED TO BOUNCE?
	BEQ MISEXP		;NO, KILL IT
	JMP BOUNCR		;ELSE BOUNCE
HITCHK:	TXA			;GET OBJECT #
	PHA			;STASH
	AND I,2			;ISOLATE PLAYER #
	TAX
	JSR TTOM		;CNVT TO MISSILE CO-ORD Y=V,ACC='H'
	PHA
	TYA
	PHA
	TSX
	LDA ZX,3		;GET BACK OBJECT #
	TAX
	LDA ZX,MHPOS
	LDY ZX,MVPOS
	JSR DISTSQ		;RETURNS WITH ACC=R**2
	CMP I,81.
	PLA
	PLA
	PLA
	TAX
	BCC 1$
	RTS			;JUST RETURN IF R>=9
1$:	PHA			;SAVE "X" AGAIN
	AND I,2			;PLAYER #
	TAX
	BIT Z,CASE		;GAME?
	BMI 15$			;NO, SKIP SCORE
	INC ZX,SCORE		;SCORES ARE CROSSED
	LSR Z,RWFLAG		;CAUSE A RE-WRITE
15$:	LDA I,3F
	STA ZX,EXTIM		;EXTIM'S ARE CROSSED
	TXA
	EOR I,2
	TAX
	LDA Z,TIME
	ASL
	LDA I,18
	BCC 2$
	LDA I,-18
2$:	CLC
	ADC ZX,ROTN
	STA ZX,ROTN
	LDA I,0
	STA ZX,MISSES
	PLA
	TAX			;POINT BACK AT MISSILE
MISEXP:	LDA ZX,MEXTIM
	BNE 1$
	LDA I,0F
	STA ZX,MEXTIM
1$:	DEC ZX,MEXTIM
	BEQ KILLM
	RTS
CKS1:	.BYTE 93		;CHECKSUM FOR SECOND 2 K
KILLM:	LDA I,0
	STA ZX,MVPOS		;HIDE MISSILE IN V-BLANKING
	TXA
	PHA
	AND I,2
	EOR I,2
	TAX
	INC ZX,MISSES		;REPORT LOUSEY AIM
	LSR ZX,MCOUNT		;2-> 1, 1-> 0, 0-> 0
	PLA			;GET MISSILE # BACK
	TAX
	RTS

;BOUNCE ROUTINE
BNCMSK:	.BYTE ^B10101010,^B11101110,^B10111011		;HORIZ WALL
	.BYTE ^B01011111,^B11110101,^B01010101		;VERT WALL
	.BYTE ^B10111101,^B11100111,^B01111110		;CORNERS LL,LR,UR
	.BYTE ^B11011011				;CORNER UL
BOUNCR:	AND I,0F			;ISOLATE WALL TYPE
	TAY
	LDA AY,BNCMSK			;GET CORRESPONDING BOUNCE MASK
	BIT Z,J				;SELECT NYBBLE PER SIGN OF J
	BMI 1$
	ASL
	ASL
	ASL
	ASL
1$:	BIT Z,K				;SELECT 'TASTE' PER SIGN OF K
	BMI 2$
	ASL
	ASL
2$:	CMP I,0C0			;RUNNING INTO A CORNER?
	BCC 25$				;NO, PROCEED
	LDA Z,J
	EOR ZX,MVSTEP			;CAN WE REALLY BOUNCE VERT?
	BPL 23$				;NO, LET HIM FIND OUT
	LDA Z,K
	EOR ZX,MHSTEP			;CAN WE REALLY BOUNCE HORIZ?
	BPL 23$				;NO, LET HIM FIND OUT
	LDA Z,TIME			;ELSE TOSS A COIN FOR WHICH
	LSR				;TO DO
	LDA I,80
	BMI 24$
23$:	LDA I,0C0
24$:	BCS 25$
	EOR I,0C0
25$:	ASL				;CAN WE BOUNCE VERT.?
	BCC 4$				;NO, SKIP IT
	PHA
	LDA ZX,MVSTEP			;BOUNCING ALLOWED, CHECK SIGNS
	EOR Z,J				;OF POSITON/DIRECTION
	BPL 3$				;DIFF.,FORGET IT
	LDA I,0
	SBC ZX,MVSTEP			;CARRY SET ALREADY
	STA ZX,MVSTEP
3$:	PLA				;GET BACK BOUNCE MASK
4$:	ASL				;CAN WE BOUNCE HORIZ.?
	BCC 5$
	LDA ZX,MHSTEP			;BOUNCING ALLOWED,
	EOR Z,K
	BPL 5$
	LDA I,0
	SBC ZX,MHSTEP			;CARRY SET ALREADY
	STA ZX,MHSTEP
5$:	TXA
	PHA
	AND I,2
	TAX
	LDA I,0FE
	STA ZX,RICREQ
	PLA
	TAX
	RTS
	.SBTTL UTILITIES
	.SBTTL	INITIALIZE
INIT:	JSR CLEAR
	JSR WPF
	JSR SETTNK		;RESET TANKS TO STARTING POSN.
	LDA I,0FF
	STA Z,INTLOK
	CLD
	CLI
	RTS

	.SBTTL	WRITE PLAYFIELD
;WRITE THE BORDER, CLEAR THE INSIDE
WBDR:	LDX I,0
	TXA
1$:	BMI 2$
	STA AX,PLAY+300		;BOTTOM OF PLAY
2$:	STA AX,PLAY
	STA AX,PLAY+100
	STA AX,PLAY+200
	DEX
	BNE 1$
	LSR Z,RWFLAG		;FORCE SCORE RE-WRITE
	LDX I,0			;POINT TO BORDER DESCRIPTOR
	JMP WBENT		;SNEAK IN THE SIDE DOOR
PFSELT: .WORD PFBDR-1,PFNBAR-1	;OFFSET FOR +(PTR)
	..1	=1
PFBDR:  .PFDSC <60,0,0,0,0,0,0,0,2,2,2>
	.PFDSC	<0,0,0,0,0,0,0,3,0,0,0,2>
	.PFDSC	<0,0,0,0,0,0,0,3,3,3,0,0,0,0>
	.PFDSC	<0,0,0,3,3,3,3,3,3,3,3,3,3,3>
	.PFDSC	<3,3,3,3,3,3,3,3,3,3,3,3,3,1>
	.PFDSC	<1,1,1,1,1,1,1,1,1,1,1,1,1,1,1>
	.PFDSC	<1,1,1,1,1,1,1,1,1,1,1,1,1,1,1,2>
	.PFDSC	<2,2,2,2,2,2,2,2,2,2,2,2,2>
	.PFDSC	<2,2,2,2,2,2,2,2,2,2,0,0>
	.FLSH
PFNBAR:	.PFDSC	<0E3,0,1,108,2,0,0,0,1,0CF,0,1>
	.PFDSC	<0F4,0,0,0,3,2,0FB,0,1,1A8,3,2>
	.PFDSC	<1B7,3,2,283,0,1,268,3,0,0,0,1>
	.PFDSC	<294,0,0,0,2,3,29B,0,1,2AF,0,1>
	.PFDSC	<308,3,2,317,3,2,3FF>		;END OF BARRIERS, NOW LIST MINES
	.PFDSC	<8B,94,16D,172,20D,212,304,30C,313,31B>
	.PFDSC	<3FF>			;END OF MINES
	.FLSH

;GETTST RETURNS THE NEXT 2 BITS FROM A STRING POINTED TO BY TADL, TADH AND Y
GETTST:	.IF DF,BOOBOO
	STA A,WTCHDG
	LDA Z,SDB2+4
	LSR
	BCS GETTST
99$:	STA A,WTCHDG
	LDA Z,SDB2+4
	LSR
	BCC 99$
	LDA Z,DADH
	LDX I,4
	JSR DEPICT
	LDA Z,DADL
	LDX I,6
	JSR DEPICT
	.ENDC
	LDA Z,TSTMSK		;MASK FOR 2 BIT "TASTE"
	LSR
	LSR			;SHIFT DOWN TO NEXT ONE
	BNE 1$			;IF THERE IS ONE LEFT
	LDA I,0C0		;ELSE RESTART IN LEFT
	INY			;POINT TO NEXT BYTE
	BNE 1$			;IF NO WRAP
	INC Z,TADH		;ELSE BUMP PAGE
1$:	STA Z,TSTMSK		;SAVE MASK
	STA Z,J			;AND TEMP COPY
	AND NY,TADL
2$:	LSR Z,J			;RIGHT JUSTIFY MASK
	LSR Z,J
	BEQ 3$			;JUSTIFIED? SO IS DATA
	LSR			;ELSE SHIFT DATA
	LSR
	BPL 2$			;ALWAYS
3$:	RTS
GTADDR: JSR GETTST		;GET NEXT 2 BITS
	CLC
	ADC I,PLAY&0FF00/100	;OFFSET FROM START OF PLAYFIELD
	STA Z,DADH		;PUT IN BOTTOM OF PTR HIGH
	LDA I,1			;SENTINAL
	STA Z,DADL
1$:	JSR GETTST		;NEXT 2 BITS
	ASL Z,DADL		;'SHIFT' INTO ADL
	ASL Z,DADL
	ORA Z,DADL
	STA Z,DADL
	BCC 1$			;GO BACK UNTIL SENTINAL FALLS OUT
	CMP I,0FF
	BNE 2$
	LDA Z,DADH
	CMP I,PLAY&0FF00/100+3
	BNE 2$
	RTS		;CARRY IS SET FROM COMPARE FOR FRETURN
2$:	CLC
	RTS			;NORMAL RETURN

;WPF WRITES THE PLAY-FIELD FROM DESCRIPTORS IN TABLE POINTED TO BY (X)
WPF:	JSR WBDR			;WRITE THE BORDER
	LDA Z,PFSEL
	AND I,0C1		;PLAYFIELD SELECT IN BOTTOM BIT
	LSR
	BCS 1$
	RTS
1$:	LDX I,2
WBENT:	LDA AX,PFSELT		;GET POINTER FROM TABLE
	STA Z,TADL		;SET UP INDIRECT PTR
	LDA AX,PFSELT+1
	STA Z,TADH
	LDY I,0			;INITIALIZE Y
	STY Z,TSTMSK		;AND 'TASTE' PTR
STRTLN:	JSR GTADDR		;GET ADDRESS OF NEXT LINE OR FRETURN
	BCS DOMINE		;ON FAILURE, DO MINES
	JSR GETTST		;GET FIRST ARROW
	STA Z,DIR		;SAVE AS 'PREV. DIR.'
	CLC
	ADC I,21		;MAKE IT AN END SEGMENT
	LDX I,0
	STA NX,DADL		;STASH IT
	JSR BPTR
CNTLIN:	JSR GETTST		;GET NEXT 2 BITS
	CMP Z,DIR		;SAME DIR?
	BNE 2$			;NO, DO SOMETHING
	CMP I,2			;HORIZ OR VERT
	LDA I,20		;ASSUME HORIZ. CONT. SEG
	BCC 1$			;HORIZ WOULD CAUSE CARRY CLEAR
	LDA I,25		;ELSE SET VERT. CONT. SEG
1$:	LDX I,0			;INSURANCE
	CMP NX,DADL		;OVERLAY SAME
	BNE 15$			;NO, PROCEED
	RTS			;ELSE RETURN
15$:	STA NX,DADL		;STASH CHAR
	JSR BPTR		;BUMP PTR
	JMP CNTLIN		;GO BACK FOR MORE
2$:	TAX			;SAVE NEW
	EOR Z,DIR		;CHECK VS. PREV. DIR.
	LSR			;IS 2-BIT THE SAME
	BNE 3$			;NO, DO A CORNER
	TXA			;ELSE GET BACK NEW DIR.
	CLC
	ADC I,21		;MAKE IT AN END SEG.
	LDX I,0
	STA NX,DADL		;STASH IT
	JMP STRTLN		;START NEXT LINE
3$:	TXA			;GET BACK NEW DIR
	ASL
	ASL
	ORA Z,DIR		;BUILD TBL PTR
	STX Z,DIR		;SAVE NEW DIR
	TAX
	LDA AX,CNRTBL		;FIND THE RIGHT CORNER
	BNE 4$			;***
	STX A,PLAY+3		;***
4$:	LDX I,0
	STA NX,DADL		;STASH
	JSR BPTR		;BUMP
	JMP CNTLIN		;CONTINUE

DOMINE:	JSR GTADDR		;GET ADDRESS OR FRETURN
	BCS 1$			;FAIL,RETURN
	LDA I,7A		;A MINE
	LDX I,0
	STA NX,DADL		;STASH IT
	BEQ DOMINE		;*** ALWAYS
1$:	RTS
SETTNK:	LDA Z,PFSEL		;GET PLAYFIELD CHOICE
	LSR			;PUT IT IN CARRY
	LDA I,78		;ASSUME BARRIERS TANKS IN CENTER
	TAY			;BOTH ON SAME LINE
	BCS 1$  		;CHECK CHOICE. IF BARRIER, PROCEED
	LDA I,48		;ELSE OFFSET TANKS IN OPEN-FIELD
	LDY I,0A8		;TO FOIL QUICK-DRAW ARTISTS
1$:	STA Z,VPOS		;STORE THE CHOSEN POSITIONS
	STY Z,VPOS+2
	LDA I,0D4
	STA Z,HPOS+2
	LDA I,0C0
	STA Z,ROTN+2
	LDA I,38
	STA Z,HPOS
	LDA I,40
	STA Z,ROTN
	RTS
CNRTBL:	.BYTE 0,0,27,28,0,0,26,29
	.BYTE 29,28,0,0,26,27,0,0
DINCTB:	.BYTE 1,-1,-20,20
BPTR:	LDX Z,DIR
	LDA I,0
	STA Z,DIR		;USING DIR FOR TEMP
	LDA AX,DINCTB		;GET INC./DEC. FOR THIS DIR
	BPL 1$
	DEC Z,DIR		;SIGN EXTEND
1$:	CLC
	ADC Z,DADL		;D.P. ADD TO PTR
	STA Z,DADL
	LDA Z,DIR
	ADC Z,DADH
	STA Z,DADH
	STX Z,DIR		;RESTORE DIR
	RTS

	.SBTTL	CLEAR RAM
CLEAR:  LDA I,0
	LDX I,CLRZON
1$:	STA ZX,0
	DEX
	BNE 1$
	RTS

	.SBTTL	DIVIDE
DIV10:  LDA I,10.		;DIVIDE BY 10.
	STA Z,DIVSOR
DIVIDE:	LDY I,8.		;CARRY TO 8 BITS
	LDA I,0
DLOP:	ROL Z,QUOT		;SHIFT QUOTIENT IN, DIVIDEND OUT
	ROL
	CMP Z,DIVSOR		;TRIAL "SUBTRACT"
	BCC 1$			;IF DIVISOR LARGER, JUST SHIFT.
	SBC Z,DIVSOR		;REAL SUBTRACT (WILL SET CARRY)
1$:	DEY			;COUNT THE BITS
	BNE DLOP
	ROL Z,QUOT		;GET LAST QUOTIENT BIT IN
	RTS
	.SBTTL	MOTION CTR TO RAM ADDR.
;X POINTS TO OBJECT(-4,-2=TANKS;0,2,4,6=MISSILES). RETURNS WITH ADL, ADH
;POINTING TO RAM ADDR ABOVE & LEFT OF OBJECT, Y=21 (FOR NY USE),J=V-0FFSET,
;K=H-OFFSET (WHERE OFFSET=P.F.POSN-M.O.POSN)
MTORAM:	LDA I,PLAY&0FF00/400
	STA Z,ADH
	LDA I,-10
	CLC
	ADC ZX,MVPOS
	PHA
	ASL
	ROL Z,ADH
	ASL
	ROL Z,ADH
	AND I,0E0
	STA Z,ADL
	PLA
	AND I,7
	SEC
	SBC I,4				;MAKE SIGNED (-TOP,+BOTTOM)
	STA Z,J
	LDA I,-10
	CLC
	ADC ZX,MHPOS
	PHA
	LSR
	LSR
	LSR
	ORA Z,ADL
	STA Z,ADL
	PLA
	AND I,7
	SEC
	SBC I,4				;MAKE SIGNED (-LEFT,+RIGHT)
	STA Z,K
	LDY I,21
	RTS
	.SBTTL	TANK/MISSLE CONV
;MTOT CONVERTS MISSILE COORD'S TO TANK, TTOM IS VICE-VERSA
;ENTERED WITH X POINTING TO SOURCE.  RETURNS WITH
;A=HPOS Y=VPOS
MTOT:	LDY ZX,VPOS
	INY
	JMP MTRET
TTOM:	LDY ZX,VPOS
	DEY
MTRET:	LDA ZX,HPOS
	RTS
	.SBTTL	BUTTON WATCHER
STRTQ2:	LDX I,2
	CLC			;DEFAULT CARRY CLEAR (NO-ONE STARTED)
1$:	LDA A,CONOPT
	AND I,3
	BEQ 13$
	LDA Z,CREDIT
	BEQ 3$			;NO CREDIT, FORGET IT
13$:	LDA Z,FOLKS		;ANYBODY IN YET
	BEQ 15$			;NO, BOTH FAIR GAME
	LDA ZX,ROBOT		;MINUS IS ALREADY IN GAME
15$:	EOR I,80		;PLUS IF ALREADY IN GAME
	AND ZX,SSTAT		;CHECK SWITCH UNDER MASK
	BPL 2$			;BUTTON UP OR ALREADY IN
	INC Z,FOLKS		;COUNT HIM
	LDA I,255.
	STA ZX,ROBOT		;FLAG IN GAME
	DEC Z,CREDIT		;CHARGE HIM
	LSR Z,RWFLAG		;CAUSE SCREEN RE-WRITE
	SEC			;NOTIFY CALLER
2$:	DEX
	DEX
	BPL 1$			;CHECK OTHER PLAYER
3$:	RTS
	.SBTTL	SIN AND COS
;REPLACE ANGLE IN A WITH ITS SIN(OR COS) (BLITZ X IF RENT NOT DEFINED)
SIN:	SEC			;SIN(ALPHA)=COs(PI/2-ALPHA)
	SBC I,64.		;EXCEPT IN SPRINT WHERE IT=COS(ALPHA-PI/2)
RENT	=0
COS:	PHA
	TXA
	PHA
	TSX
	LDA ZX,2
	LSR
	LSR
	TAX
	LDA AX,77$
	TSX
	STA ZX,2
	PLA
	TAX
	PLA
	RTS
77$:	.BYTE 0,13.,25.,37.,49.,60.,71.,81.,91.		;COS (0-8)
	.BYTE 99.,106.,113.,118.,122.,126.,127.,127.	;COS (8-10)
	.BYTE 127.,126.,122.,118.,113.,106.,99.  	;COS (11-17)
	.BYTE 91.,81.,71.,60.,49.,37.,25.,13.,0		;COS (18-20)
	.BYTE -13.,-25.,-37.,-49.,-60.,-71.,-81.,-91.		;COS (21-28)
	.BYTE -99.,-106.,-113.,-118.,-122.,-126.,-127.,-127.	;COS (29-30)
	.BYTE -127.,-126.,-122.,-118.,-113.,-106.,-99.		;COS (31-37)
	.BYTE -91.,-81.,-71.,-60.,-49.,-37.,-25.,-13.		;COS (38-3F)


	.SBTTL NMI SERVICE

; BASIC TIMING INTERRUPT, OCCURS ON FALLING EDGE OF 32V

NMINT:  STA A,WTCHDG		;MUZZLE HOWIE'S DOG
	BIT Z,INTLOK		;CHECK PSUEDO I-FLAG
	BMI 1$
	RTI			;IF SET, RETURN FAST
1$:	PHA			;ELSE SAVE REGS
	TXA
	PHA
	TSX			;POINT TO RESERVED SPACE
	TYA
	PHA			;STASH Y
;
; STACK FRAME AT THIS TIME, AS HEX DISPLACEMENTS FROM X
;
;	0= INTERRUPTED Y
;	1= INTERRUPTED X
;	2= INTERRUPTED ACC
;	3= STATUS
;	4= PCL
;	5= PCH
;
	CLD			;INSURANCE
	LDA ZX,5		;GET PCH
	AND I,0F0		;ISOLATE UPPER NYBBLE
	CMP I,PROG&0F000/100	;PCH IN RIGHT 4K BLOCK?
	BEQ 2$			;YES, OK.
	JMP FRESET		;ELSE FAKE RESET
2$:	LDA A,VTEST		;GET LINE #
	BMI REGINT		;IF NOT IN VERT BLANK.

	.SBTTL	V-BLANK
VBLANK: LDA Z,TIME
	LSR			;CARRY MEANS ODD FRAME
	LDX I,2
1$:	LDA ZX,HPOS		;MOVE RAM VALUES TO MOTION CIRCUITS.
	STA ZX,HHORIZ
	LDA ZX,VPOS
	STA ZX,HVERT
	LDA ZX,MHPOS
	LDY ZX,MVPOS
	BCS 2$
	LDA ZX,MHPOS+4
	LDY ZX,MVPOS+4
2$:	PHP			;STASH EVEN/ODD FRAME BIT
	CMP I,8
	BCS 3$			;BRANCH IF ACC <7
	LDA I,0FF		;ELSE SET RIGHT MARGIN
3$:	CMP I,10
	BCS 4$
	LDA I,10
4$:	PLP			;GET BACK FRAME BIT
	STA ZX,HHORIZ+4
	TYA
	STA ZX,HVERT+4
	BEQ 6$			;BLANK IF IN V-BLANKING
	LDY ZX,MEXTIM
	BCS 5$
	LDY ZX,MEXTIM+4
5$:	LDA AY,EPTBL		;EXPLOSION PICT
6$:	EOR I,84
	STA ZX,HROTN+4
	LDA AX,COLDET		;CHECK FOR COLLISION
	STA ZX,COLFLG		;LEAVE NOTE
	STA AX,COLRES		;RESET LATCH
	DEX
	DEX
	BPL 1$
	BCS 8$
	LDX I,2
7$:	CLC
	JSR PUMPER
	DEX
	DEX
	BPL 7$
8$:	INC Z,TIME
	LDA I,0
	STA Z,FTIME			;FLAG FOREGROUND REQUEST
	INC Z,SYNC
	JSR BOZLIT		;MAINTAIN LAMPS
;MISC. CHORES WE ATTEND TO EVERY FOUR MILLISECONDS.
REGINT:	JSR SWDB		;DEBOUNCE ALL SWITCHES
	JSR COIN		;HANDLE COINS AND CREDITS
	JSR SOUND		;MAINTAIN SOUNDS
	LDA Z,FTIME
	BNE NMIEXT
	TSX
	LDA ZX,3		;GET PROCESSOR STATUS
	AND I,4			;I SET?
	BNE NMIEXT		;YES, GO HOME
	BRK			;ELSE INVOKE FOREGROUND
	NOP			;CHUCKY-BOY DOES IT AGAIN

NMIEXT:	PLA
	TAY
	PLA
	TAX
	PLA
	RTI
EPTBL:	.BYTE 80,88,88,88,88,90,90,90
	.BYTE 98,98,98,90,90,90,88,88
	.SBTTL	DEBOUNCE SWITCHES
SWDB:	LDA I,0
	CLC
	LDX A,BARSWT
	BPL 1$
	SEC
1$:	ROL
	LDX A,RBDSWT
	BPL 2$
	SEC
2$:	ROL
	LDX A,INVSWT
	BMI 3$
	SEC
3$:	ROL
	LDX I,4
	JSR GDBSW
	LDX0I,2
	JSR RDcONT
	JSR GDBSW
	LDX I,2
	JSR PÄCONÔMGDBSW:TAY
	LDA ZX,SDB1	STY!^X,SDb1	?ROTÿÿÿÿÿÿÿÿÿÿÿÿïÿÿÿÿÿÿýÿÿÿÿÿÿÿÿßX,SDB2
	STA ZX,SDB2		;SDB1 INTO SDB2
	STY Z,OSWT		;SAVE OLD SDB2
	AND ZX,SDB1		;LEAVE ONES WHERE TWICE ON
	STA Z,ONS
	LDA ZX,SDB1
	ORA ZX,SDB2		;LEAVE ZEROES WHERE TWICE OFF
	AND Z,OSWT		;SÍV \WICE-OFF BITS OFF
	ORA Z,ONS		;SÅT TWICE-ON BITS ON
	STA ^X,SstAT		;STORE SWITCH STAT]S
	R\S
	.SBTTJ	READ CONTROLS
;ENTERED WITH X=PLAYER #089`OR 2)
RDCONT:	MDA I,5
	STC A,DTOA		;SET FIRST THRESHOLD
	LDY I,0
	LDA AX,JOY1
	BPL 11$			;BELOW FIRST THRESHOLD
	INY			;OVER, COUNT ONE
11$:	LDA I,10.
	STA A,DTOA		;SECOND THRESHOLD
	LDA AX,JOY1
	BPL 1$
	INY
1$:	LDA AY,X3TAB		;GET 3*Y
	TAY
	LDA AX,JOY2
	BPL 6$			;NOT OVER SECOND, TRY FIRST 
	INY
2$:	INY
3$:	TYA
	LDY AX,FIRE1
	BPL 4$
	ORA I,40
4$:	LDY AX,START1
	BMI 5$			;MAKE <START> ASSERTED HIGH
	ORA I,80
5$:	RTS
6$:	LDA I,5			;NOT SECOND, TRY FIRST
	STA A,DTOA
	LDA AX,JOY2
	BPL 3$			;NOT PAST FIRST EVEN
	BMI 2$			;ALWAYS
X3TAB:	.BYTE 0,3,6		;(0,1,2)*3
	.SBTTL	COINS & CREDITS

;ACCUMULATES COINS AND CONVERTS TO CREDITS BLITZ A,X,Y

COIN:	LDX I,2
10$:	JSR CONTST		;TEST MECH
	DEX
	DEX
	BPL 10$
11$:	LDA I,6			;SIX COINS MAX BEFORE CHANGING TO CREDITS
	CMP Z,COINCT
	BCS 1$
	STA Z,COINCT		;POLITELY HOLD IT DOWN TO SIX
1$:	LSR			;MAKE A THREE
	AND A,CONOPT		;GET COIN OPTION SWITCHES (IN D0 & D1)
	LSR			;SAVE MSB OF OPTIONS
	TAY
	ADC I,0			;IF EITHER ON PRICE IS 1 COIN; IF BOTH, 2 COINS
	STA Z,PRICE
	BNE 2$
	STA Z,COINCT		;FREE PLAY, CLEAR COINS
	STA Z,CREDIT		;ALSO CLEAR CREDITS
	RTS
2$:	LDA Z,COINCT
	CMP Z,PRICE		;CHECK IF WE HAVE ENOUGH
	BCC 5$			;IF NOT, RETURN
	SBC Z,PRICE		;IF SO DEDUCT PRICE
	STA Z,COINCT
	TYA			;CHECK HIGH BIT OF COIN OPTION
	BNE 3$			;IF A ONE, GIVE 1 CREDIT FOR THIS PRICE
	INC Z,CREDIT		;ELSE GIVE TWO CREDITS
3$:	INC Z,CREDIT
	LDA I,CRDLIM		;COMPARE TO CREDIT LIMIT
	CMP Z,CREDIT
	BCS 4$
	STA Z,CREDIT
4$:	LDA Z,COINCT		;ANY COINS LEFT?
	BNE 11$			;YES, LOOP
5$:	RTS
CONTST:	LDA AX,COINS
	EOR I,80		;COMPENSATE FOR LYLE'S INVERTOR
	ASL			;GET SWITCH INTO CARRY
	ROR ZX,CNSTAT		;ROR INTO STATUS
	LDA ZX,CNSTAT
	BEQ 4$			;ALL OFF NOW, CHECK FLAG
	AND I,0FE
	BCS 1$			;FLAG 1, SKIP COMPARE
	CMP I,0F8		;LAST FIVE SAMPLES ON?
1$:	ADC I,0			;SET FLAG FROM CARRY
2$:	STA ZX,CNSTAT		;SAVE STATUS
	LDA A,SLAM		;CHECK SLAM SW.
	AND I,80		;SWITCH IS IN D7
	BNE 3$			;OK, LEAVE IT ALONE
	STA ZX,CNSTAT		;ELSE CLEAR STATUS
	STA ZX,CPIPE1		;CLEAR PIPELINE
	STA ZX,CPIPE2
3$:	RTS
4$:	BCC 2$			;FLAG NOT ON, CHECK SLAM AND GO HOME
PUMPER:	ROL ZX,CPIPE1		;RUN COINS THROUGH 16-BIT PIPELINE
	ROL ZX,CPIPE2		;SHIFT 1 BIT EACH 2 FRAMES OR EACH NEW COIN
	BCC 6$			;NOTHING FELL OUT
	INC Z,COINCT
	LDA I,0FE
	STA Z,BEEPER		;ACKNOWLEDGE COIN
	LDA Z,STTIME		;IS START TIMER RUNNING
	BEQ 6$			;NO, PROCEED
	LDA I,PAUSET		;YES, RESET IT
	STA Z,STTIME
6$:	RTS

	.SBTTL	SOUNDS
SOUND:	LDA Z,CASE			;GET PLAY/ATTRACT FLAG
	ASL				;CARRY = 1 MEANS ATTRACT
	ADC I,1				;COMPLEMENT OF CARRY INTO D0
	STA A,ATRACT			;TURN SOUND ON/OFF
	LSR			;WHICH WAS IT
	LDA I,0
	BCS 10$			;IN GAME, PROCEED
	STA Z,RICREQ+2		;ELSE CLEAR SCREECH2
	STA Z,RICREQ		;SCREECH1
	STA Z,SHTMR
	STA Z,SHTMR+2
	LSR Z,BEEPER
	ADC I,0
	TAY
	STA AY,SHTSND
	STA AY,SHTSND+2
	RTS
10$:	LDX I,2
1$:	PHA
	TXA
	TAY
	LSR ZX,RICREQ		;CHECK RICOCHET REQ.
	BCC 2$			;CLEAR, TURN OFF
	INY			;ELSE BUMP TO TURN ON
2$:	STA AY,SHTSND
	LDA ZX,EXTIM
	LSR
	LSR
	TAY
	PLA
	CLC
	ADC AY,EXSNDT
	LDY ZX,SHTMR
	DEY				;RUN TIMER 4 TICKS PER GRAME***
	BMI 3$				;DON'T GO BELOW ZERO
	STY ZX,SHTMR
	ADC AY,EXSNDT
3$:	LDY ZX,MEXTIM
	ADC AY,EXSNDT
	LDY ZX,MEXTIM+4
	ADC AY<EXSNDT
	DEX
	DEX
	BPL 1$
	CMP I,0F
	BCC 4$
LDA I,0F
4$:	STA A,EXPLO
	RTS
EXSNDT:	.BYTE 0,1,1,2,2,2,3,3,4,5,6,7,8,10.,11.,13.
	.SBTTL	LAMPS
BOZLIT:	LDX I,2
	LDA A,CONOPT
	AND I,3
	BEQ 2$
	LDA I,1
	CMP Z,CREDIT			;CARRY CLEAR IF CREDIT >1
	ROL
	TAX
2$:	STA AX,LCKOUT-2			;LOCKOUT COINS WHEN CREDIT >1
	LDA Z,RLAMP			;RAM COPY OF LAMPS
	LDX I,3
3$:	STA AX,LAMPS			;OUTPUT TO LAMP LATCH
	DEX
	LSR
	BCS 4$
	STA AX,LAMPS
4$:	DEX
	BPL 3$
	RTS
	.SBTTL RESET & TEST
	.SBTTL	POWER ON RESET
;ENTERED AT FRESET TO FAKE A RESET, ENTERED AT RESET BY HARDWARE
FRESET:	LSR Z,INTLOK		;SOFTWARE IRQ MASK
	SEI			;HARDWARE IRQ MASK
RESET:	LDX I,255.
	TXS
	CLD
	LDX I,0
	TXA
1$:	STA ZX,0
	DEX
	BNE 1$
	BIT A,TESTSW
	BVC ZPTEST
	JSR INIT
	LDA I,255.
	STA Z,CASE
	JMP WAIT
	.SBTTL	RAM TEST
ZPTEST:	LDX I,0
	TAX
1$:	STA ZX,0		;CLEAR ZERO PAGE
	STA AX,PLAY		;CLEAR TOP OF PLAY
	INX
	BNE 1$
	LDY I,255.
2$:	CMP ZX,0		;READ-BACK CHECK
	BNE BADRAM			;UNEQUAL IS ERROR
	STY ZX,0		;WRITE DISTURB
	DEX
	BNE 2$
RAMOK:  LDX I,9		;POINT TO 'RAMOK'
	BNE RAMRPT
BADRAM:	LDX I,6			;POINT TO 'BADRAM'
RAMRPT:	LDY I,6
1$:	LDA AX,BRAOK
	STA AY,PLAY+28
	DEX
	DEY
	BPL 1$
	.SBTTL	PATTERN SCREEN
TROUT:  LDX I,0
1$:	LDA I,0
	STA ZX,0			;CLEAR Z-PAGE
	STA AX,PLAY+256.		;CLEAR MIDDLE OF SCREEN
	TXA
	STA AX,PLAY+512.
	STA AX,PLAY+768.
	DEX
	BNE 1$

	.SBTTL	ROM TEST
ROMTST:	LDA I,PROG/256.
	STA Z,ADH		;SET STARTING PAGE
2$:	LDA I,0
	STA Z,ADL		;KEEP OFFSET 0
	LDX I,85.		;CLEAR CHECKSUM WITH NON-ZERO SEED
	ASL CKSFLG		;CLEAR ERROR FLAG
	TAY			;CLEAR Y
3$:	TXA			;CKSUM TO ACC
31$:	EOR NY,ADL
	INY
	BNE 31$
	TAX			;SAVE CKSUM
	INC Z,ADH
	LDA I,7
	BIT Z,ADH
	BNE 3$
	TXA
	AND I,0F
	BEQ 32$
	STA A,WTCHDG
	INC Z,CKSFLG
32$:	ASL Z,CKSFLG
	TXA
	AND I,0F0
	BEQ 4$
	STA A,WTCHDG
	INC Z,CKSFLG
4$:	LDA Z,ADH
	CMP I,<VECTRS&0FF00>/256.+1
	BCC 2$
	LDX I,0
	LDY I,53.
	LDA Z,CKSFLG
	AND I,0F		;(4 PROMS USED)***
	BNE BADROM
	LDX I,9
	BNE ROMRPT
BADROM:	STA A,PLAY+39
	LDX I,6
ROMRPT:	LDY I,6
1$:	LDA AX,BROK
	STA AY,PLAY+31
	DEX
	DEY
	BPL 1$
	LDA I,83
	STA Z,RLAMP
	STA Z,BVSWT
	STA Z,CREDIT
	JSR BOZLIT

	.SBTTL	SWITCH TEST
TWAIT:  BIT A,VTEST
	BPL TWAIT
1$:	BIT A,VTEST     	;CATCH RISING EDGE OF VBLANK (BAR)
	BMI 1$
	JSR SWDB
	JSR SOUND
	BIT A,TESTSW
	BVC SWTEST		;STILL IN TEST
	JMP FRESET		;ELSE FAKE RESET BACK TO GAME
SWTEST:	LDA A,COINS
	ASL
	LDA A,COINS+2
	EOR A,SLAM
	AND I,80
	ADC Z,SSTAT
	CLC
	ADC Z,SSTAT+2
	ADC Z,SSTAT+4		;ACC=CHECSUM OF SWITCH
	LDY I,0FE
	CMP Z,STOT
	BEQ 4$			;SAME, KEEP QUIET
	STY Z,BEEPER		;SCREECH
4$:	STY Z,CASE		;TURN OTHER SOUNDS OFF
	STA Z,STOT
	LDA A,TIMOPT
	AND I,3
	CLC
	ADC I,71
	STA A,PLAY+50
	JMP TWAIT
BRAOK:  .BYTE 2,1,4,0,12,1,0D,0,0F,0B	;/BAD@RAM@OK/&3F
BROK:	.BYTE 2,1,4,0,12,0F,0D,0,0F,0B	;/BAD@ROM@OK/&3F
FILL	=0BFFA-.
	.REPT FILL
	.BYTE 0
	.ENDR
VECÔRS:	.WORD NMINT,RESET,FGND
	.=	NIOA		;RAM VECTOR FOR DVEL SYS
	.WORD NMINT
	>=	IOVA		; "    "     "  ` "   "
	.WORD FGND
	.=	0F783
	.BYTE	0FF,4				;SP,P
	.WORD	RESET
	.END RESET
                                                   